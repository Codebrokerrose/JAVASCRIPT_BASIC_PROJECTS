;
(function() {
    'use strict';
    var marvelversion = "marvel-1.77.0",
        marvelconfig, marvelactivate = true,
        marvelnode, marveldebug = false,
        marvelcustomerid, marvelignoreDomain, marvelurllist, marvelunblockurllist, marvelbeCDN, marvelprotocol, marvelpath, marvelhost,
        marvelurl, marvelopt, marveldatadroponerror, marveldropsrcset = true;
    var marvelignoreselfdomain = false,
        marvelignorepath = [];

    var MV_HTTP = "http://",
        MV_HTTPS = "https://",
        MV_DOUBLE_SLASH = "//",
        MV_DATA = "data:",
        MV_BACK_SLASH = "../",
        MV_SLASH = "/",
        MV_DOT_SLASH = "./",
        MV_SVG = ".svg",
        MV_GIF = ".gif",
        MV_MP4 = ".mp4",
        MV_WEBM = ".webm",
        MV_OGG = ".ogv";

    var MV_SRC = "src",
        MV_DATA_SRC = "data-src",
        MV_SRCSET = "srcset",
        MV_DATA_SRCSET = "data-scrset",
        MV_IMG = "img",
        MV_SOURCE = "source",
        MV_STYLE = "style",
        MV_DATA_STYLE = "data-style",
        MV_DIV = "div",
        MV_SECTION = "section",
        MV_ARTICLE = "article",
        MV_FIGURE = "figure",
        MV_A = "a",
        MV_ATT = "attributes",
        MV_BODY = "body";

    var MV_BACKGROUND_IMAGE = "background-image",
        MV_BACKGROUND = "background:",
        MV_BACKGROUND_SPACE = "background ",
        MV_URL = "url",
        MV_OPEN_BRACKET = "(",
        MV_CLOSE_BRACKET = ")",
        MV_QUOTE = "'",
        MV_DOUBLE_QOUTE = "\"",
        MV_SPACE = " ",
        MV_COMMA = ",",
        MV_CONNECT = "), url('";

    var marvelobserver, marvelobserverhead, marvelobserverConfig, marvelobserverheadConfig, MV_HEAD_BODY_OPT = 1;

    function enableMarvel(config) {

        marvelconfig = config;
        var marveldebugparameter, marvelactivateparameter, marveltestmode = false,
            marveltestpageparameter;

        try {

            if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > -1)
                return;

            marvelnode = document.getElementById("marvel");
            if (marvelnode) {
                marveltestmode = marvelnode.getAttribute("data-testmode");
                marvelcustomerid = marvelnode.getAttribute("data-customerid");
                marvelopt = marvelnode.getAttribute("data-opt");

            } else if (marvelconfig) {
                marveltestmode = config["data-testmode"];
                marvelcustomerid = config["data-customerid"];
                marvelopt = config["data-opt"];

            } else
                return;


            if (marvelgetParameterByName("data-opt"))
                marvelopt = marvelgetParameterByName("data-opt");

            marveldebug = false;
            marveldebugparameter = marvelgetParameterByName("marvel-debug");
            if (marveldebugparameter && marveldebugparameter == "true")
                marveldebug = true;


            if (marveltestmode) {
                marvelactivate = false;
                marveltestpageparameter = marvelgetParameterByName("marvel-testpage");
                if (marveltestpageparameter && marveltestpageparameter == "true")
                    marvelactivate = true;
            } else {
                marvelactivate = true;
                marvelactivateparameter = marvelgetParameterByName("marvel-activate");
                if (marvelactivateparameter && marvelactivateparameter == "false")
                    marvelactivate = false;
            }

            if (marvelcustomerid) {
                marvelcustomerid = marvelcustomerid.trim();
                if (marvelcustomerid.length == 0)
                    marvelactivate = false;
            } else
                marvelactivate = false;

            if (marveldebug) {
                marvelprint("marveltestmode=" + marveltestmode);
                marvelprint("marvel-testpage=" + marveltestpageparameter);
                marvelprint("marvelopt=" + marvelopt);
            }

            marvelinit();

            var v = 0;
            for (v = 0; v < marvelignorepath.length; v++) {
                if (marvelurl.indexOf(marvelignorepath[v]) >= 0) { //if(marvelpath==marvelignorepath[v]){
                    marvelactivate = false;
                    break;
                }
            }

            marvelprint("marvelactivate=" + marvelactivate);
            if (marvelactivate) {

                if (marvelopt == MV_HEAD_BODY_OPT) {
                    marvelobserverheadConfig = {
                        childList: true
                    };
                    marvelobserverhead = new MutationObserver(marvelsubscriberhead);
                    marvelobserverhead.observe(document.documentElement, marvelobserverheadConfig);
                } else {
                    marvelobserverConfig = {
                        childList: true,
                        subtree: true,
                        attributeFilter: [MV_SRC, MV_SRCSET, MV_STYLE]
                    };
                    marvelobserver = new MutationObserver(marvelsubscriber);
                    marvelobserver.observe(document.documentElement, marvelobserverConfig);
                }
            }

        } catch (e) {
            marvelprint(e);
        }
    }

    function marvelinit() {

        var marvelcname, marveldatadomain, marveldataunblockurl, marvelblacklistcustomer, marveltestmode = false,
            marveltestpageparameter = false,
            marveldataurl, marveldataignoreselfdomain = false,
            marveldataignorepath;


        if (marvelnode) {
            marvelcname = marvelnode.getAttribute("data-cname");
            marveldatadomain = marvelnode.getAttribute("data-domain");
            marveldataurl = marvelnode.getAttribute("data-url");
            marveldataignoreselfdomain = marvelnode.getAttribute("data-ignoreselfdomain");
            marveldataignorepath = marvelnode.getAttribute("data-ignorepath");
            marveldataunblockurl = marvelnode.getAttribute("data-unblockurl");
            marveldatadroponerror = marvelnode.getAttribute("data-droponerror");
            marveldropsrcset = marvelnode.getAttribute("data-dropsrcset");
        } else if (marvelconfig) {
            marvelcname = marvelconfig["data-cname"];
            marveldatadomain = marvelconfig["data-domain"];
            marveldataurl = marvelconfig["data-url"];
            marveldataignoreselfdomain = marvelconfig["data-ignoreselfdomain"];
            marveldataignorepath = marvelconfig["data-ignorepath"];
            marveldataunblockurl = marvelconfig["data-unblockurl"];
            marveldatadroponerror = marvelconfig["data-droponerror"];
            marveldropsrcset = marvelconfig["data-dropsrcset"];
        }

        if (marveldataignoreselfdomain && marveldataignoreselfdomain == "true")
            marvelignoreselfdomain = true;

        if (marveldropsrcset && marveldropsrcset == "true")
            marveldropsrcset = true;
        else
            marveldropsrcset = false;

        if (marveldataignorepath && marveldataignorepath.trim().length > 0)
            marvelignorepath = marvelignorepath.concat(marveldataignorepath.split(","));;

        if (!marvelcname || marvelcname.trim().length <= 0)
            marvelcname = "marvel-b1-cdn.bc0a.com";
        marvelcname = marvelcname.trim();

        marvelblacklistcustomer = ["adminblock"];
        var marvelblacklistcustomerIndex = 0;
        for (marvelblacklistcustomerIndex = 0; marvelblacklistcustomerIndex < marvelblacklistcustomer.length; marvelblacklistcustomerIndex++) {
            if (marvelcustomerid == marvelblacklistcustomer[marvelblacklistcustomerIndex]) {
                marvelprint("Customer Blocked!=" + marvelcustomerid);
                marvelactivate = false;
            }
        }

        marvelignoreDomain = ["marvel-b1-cdn.bc0a.com", "marvel-b1-cdn.b3e5.com", ".doubleclick.", ".bizible.", ".bing.", ".google.", ".googleapis.", "adnxs.", "cdninstagram.", "fbcdn.", "googleusercontent.",
            ".hubspot.", ".youtube.", ".track.", ".hotjar.", "webtraxs.",
            ".datapro.", ".facebook.", ".clicksapp.", ".domclickext.", ".pingclock.", ".addthis.", "pixel", "choozle",
            ".chrome-extension.", ".youvisit.", ".twitter.", ".b0e8.", "bidswitch",
            ".adsrvr.", ".gstatic.", ".gravatar.", ".amazon-adsystem.", ".countmake.", ".rlcdn.", ".visitor-track.", ".adroll.", ".bidr.", "mapbox.",
            "turn.", "igodigital.com", "pubmatic.com", "cartocdn.com", "sonobi.com", "ids.ad.gt", "demdex.net"
        ];

        if (marveldatadomain && marveldatadomain.trim().length > 0) {
            marveldatadomain = marveldatadomain.toLowerCase();
            marvelignoreDomain = marvelignoreDomain.concat(marveldatadomain.split(","));
        }

        if (marvelignoreselfdomain) {
            marvelignoreDomain = marvelignoreDomain.concat([document.location.host]);
        }

        marvelbeCDN = marvelcname + "/" + marvelcustomerid + "/";

        marvelprotocol = window.location.protocol + "//";
        marvelhost = window.location.host;
        marvelpath = window.location.pathname;
        marvelurl = marvelhost + marvelpath;

        marvelurllist = ["chrome-extension", "adstream", "/metric/", "{{"]; // use this in command console: {% raw %}"{{"{% endraw %}
        if (marveldataurl && marveldataurl.trim().length > 0) {
            marveldataurl = marveldataurl.toLowerCase();
            marvelurllist = marvelurllist.concat(marveldataurl.split(","));
        }

        marvelunblockurllist = [];
        if (marveldataunblockurl && marveldataunblockurl.trim().length > 0) {
            marveldataunblockurl = marveldataunblockurl.toLowerCase();
            marvelunblockurllist = marvelunblockurllist.concat(marveldataunblockurl.split(","));
        }

        if (marveldebug) {
            marvelprint("marvelversion=" + marvelversion);
            marvelprint("marvelbeCDN=" + marvelbeCDN);
            marvelprint("marvelcustomerid=" + marvelcustomerid);
            marvelprint("marvelcname=" + marvelcname);
            marvelprint("marvelblacklistcustomer=" + marvelblacklistcustomer);
            marvelprint("marvelignoreselfdomain=" + marvelignoreselfdomain);
            marvelprint("marveldatadomain=" + marveldatadomain);
            marvelprint("marvelignoreDomain=" + marvelignoreDomain);
            marvelprint("marveldataurl=" + marveldataurl);
            marvelprint("marvelurllist=" + marvelurllist);
            marvelprint("marveldataunblockurl=" + marveldataunblockurl);
            marvelprint("marvelunblockurllist=" + marvelunblockurllist);
            marvelprint("marvelprotocol=" + marvelprotocol);
            marvelprint("marvelhost=" + marvelhost);
            marvelprint("marvelpath=" + marvelpath);
            marvelprint("marvelurl=" + marvelurl);
            marvelprint("marvelignorepath=" + marvelignorepath);
            marvelprint("marveldatadroponerror=" + marveldatadroponerror);
            marvelprint("marveldropsrcset=" + marveldropsrcset);
        }

    }

    function marvelgetParameterByName(name) {
        var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
        return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    }

    function marvelprint(msg) {
        if (marveldebug)
            console.log(msg);
    }


    function marvelvalidurl(oldImgval) {

        if (!oldImgval)
            return false;

        oldImgval = oldImgval.trim();

        if (oldImgval.length == 0)
            return false;

        if (oldImgval.length > 500)
            return false;

        oldImgval = oldImgval.toLowerCase();

        if (oldImgval.indexOf(marvelbeCDN) > 0)
            return false;

        if (oldImgval.indexOf(MV_SVG) >= 0 || oldImgval.indexOf(MV_GIF) >= 0 || oldImgval.indexOf(MV_MP4) >= 0 || oldImgval.indexOf(MV_WEBM) >= 0 || oldImgval.indexOf(MV_OGG) >= 0)
            return false;

        var domain = marvelgetdomain(oldImgval);
        marvelprint("marvelgetdomain=" + domain);

        var unblockurlindex = 0;
        for (unblockurlindex = 0; unblockurlindex < marvelunblockurllist.length; unblockurlindex++) {
            if (oldImgval.indexOf(marvelunblockurllist[unblockurlindex]) >= 0) {
                return true;
            }
        }

        var v = 0;
        for (v = 0; v < marvelignoreDomain.length; v++) {
            if (domain.indexOf(marvelignoreDomain[v]) >= 0) {
                return false;
            }
        }

        var urlindex = 0;
        for (urlindex = 0; urlindex < marvelurllist.length; urlindex++) {
            if (oldImgval.indexOf(marvelurllist[urlindex]) >= 0) {
                return false;
            }
        }

        return true;
    }

    function marvelgetdomain(oldImgval) {

        var domainret = oldImgval;
        var startd = oldImgval.indexOf(MV_DOUBLE_SLASH);
        if (startd >= 0) {
            oldImgval = oldImgval.substring(startd + 2);
            var folderd = oldImgval.indexOf(MV_SLASH);
            if (folderd >= 0) {
                domainret = oldImgval.substring(0, folderd);
            }
            return "." + domainret;
        } else {
            return document.location.host;
        }
    }


    function marvelgetnewimagesrc(oldImgval) {

        if (!oldImgval)
            return oldImgval;

        oldImgval = oldImgval.trim();
        var newImgVal = "";

        var imgVallowercase = oldImgval.toLowerCase();

        if (imgVallowercase.indexOf(MV_HTTP) == 0) {
            newImgVal = oldImgval.substring(7);
        } else if (imgVallowercase.indexOf(MV_HTTPS) == 0) {
            newImgVal = oldImgval.substring(8);
        } else if (imgVallowercase.indexOf(MV_DOUBLE_SLASH) == 0) {
            newImgVal = oldImgval.substring(2);
        } else if (imgVallowercase.indexOf(MV_DATA) == 0) {
            return "";
        } else {

            newImgVal = new URL(oldImgval, document.baseURI).href;
            if (newImgVal.indexOf(MV_HTTP) == 0)
                newImgVal = newImgVal.substring(7);
            else if (newImgVal.indexOf(MV_HTTPS) == 0)
                newImgVal = newImgVal.substring(8);
        }
        /*else if(oldImgval.indexOf(MV_BACK_SLASH)==0){

        	 newImgVal=new URL(oldImgval, document.baseURI).href;
        	 if(newImgVal.indexOf(MV_HTTP)==0)
        		 newImgVal=newImgVal.substring(7);
        	 else if(newImgVal.indexOf(MV_HTTPS)==0)
        		 newImgVal=newImgVal.substring(8);
        }
        else{

        	var newpath=marvelpath;
        	var fileName=oldImgval;
        	
        	if(oldImgval.indexOf(MV_SLASH)==0){
        		newImgVal=marvelhost+fileName;
        	}
        	else{
        		
        		if(oldImgval.indexOf(MV_DOT_SLASH)==0)
        			fileName=oldImgval.substring(2); 
        	
        		var pos=newpath.lastIndexOf(MV_SLASH);
        		if(pos>=0)
        			newpath=newpath.substring(0,pos);

        		newImgVal=marvelhost+newpath+MV_SLASH+fileName;	
        	}
        }*/

        var finalUrl = marvelprotocol + marvelbeCDN + newImgVal;
        return finalUrl;

    }




    function marvelgetsrcsetimg(oldsrcsetIn) {

        var newsrcset = "";

        if (!oldsrcsetIn)
            return newsrcset;

        oldsrcsetIn = oldsrcsetIn.trim();
        var oldsrcset = oldsrcsetIn.split(MV_COMMA);

        var s = 0;
        for (s = 0; s < oldsrcset.length; s++) {

            var parts = oldsrcset[s].trim().split(MV_SPACE);

            if (marvelvalidurl(parts[0])) {
                if (parts.length == 1)
                    newsrcset = newsrcset + marvelgetnewimagesrc(parts[0]) + MV_SPACE + MV_COMMA;
                else if (parts.length == 2)
                    newsrcset = newsrcset + marvelgetnewimagesrc(parts[0]) + MV_SPACE + parts[1] + MV_COMMA;
                else if (parts.length == 3)
                    newsrcset = newsrcset + marvelgetnewimagesrc(parts[0]) + MV_SPACE + parts[1] + MV_SPACE + parts[2] + MV_COMMA;
                else
                    newsrcset = newsrcset + oldsrcset[s] + MV_COMMA;
            } else {
                newsrcset = newsrcset + oldsrcset[s] + MV_COMMA;
                newsrcset = newsrcset.trim();
            }
        }

        if (newsrcset.endsWith(MV_COMMA))
            newsrcset = newsrcset.substring(0, newsrcset.length - 1);

        return newsrcset.trim();
    }


    function marvelgetsrcstyle(style) {

        var finalStyle = "";

        if (!style)
            return finalStyle;

        style = style.trim();
        var styleLower = style.toLowerCase();

        var pos = styleLower.indexOf(MV_BACKGROUND_IMAGE);
        if (pos < 0)
            pos = styleLower.indexOf(MV_BACKGROUND);
        if (pos < 0)
            pos = styleLower.indexOf(MV_BACKGROUND_SPACE);

        if (pos >= 0) {

            var urlpos = styleLower.indexOf(MV_URL, pos);
            if (urlpos < 0)
                return finalStyle;

            var start = styleLower.indexOf(MV_OPEN_BRACKET, urlpos);
            if (start > 0) {
                var end = styleLower.indexOf(MV_CLOSE_BRACKET, urlpos);
                if (end > 0) {

                    var oldImgsrc = style.substring(start + 1, end);
                    oldImgsrc = oldImgsrc.trim();
                    if (oldImgsrc.startsWith(MV_QUOTE) || oldImgsrc.startsWith(MV_DOUBLE_QOUTE))
                        oldImgsrc = oldImgsrc.substring(1);
                    if (oldImgsrc.endsWith(MV_QUOTE) || oldImgsrc.endsWith(MV_DOUBLE_QOUTE))
                        oldImgsrc = oldImgsrc.substring(0, oldImgsrc.length - 1);

                    if (marvelvalidurl(oldImgsrc)) {
                        var newimgsrc = marvelgetnewimagesrc(oldImgsrc);
                        if (newimgsrc && newimgsrc.trim().length > 0 && oldImgsrc != newimgsrc) {
                            //newimgsrc=MV_QUOTE+newimgsrc+MV_QUOTE+MV_CONNECT+oldImgsrc+MV_QUOTE;
                            newimgsrc = MV_QUOTE + newimgsrc + MV_QUOTE;
                            finalStyle = style.substring(start + 1, 0) + newimgsrc + style.substring(end);
                            return finalStyle;
                        }
                    }
                }
            }
        }

        return finalStyle;
    }


    function marvelsubscriberhead(mutations) {

        var mutation;
        var k;
        for (k = 0; k < mutations.length; k++) {
            mutation = mutations[k];
            if (mutation && mutation.addedNodes && mutation.addedNodes.length > 0) {
                var nodename = mutation.addedNodes[0].nodeName.toLowerCase();
                if (nodename == MV_BODY) {
                    if (marveldebug)
                        marvelprint("Body found");
                    marvelobserverhead.disconnect();
                    marvelobserverConfig = {
                        childList: true,
                        subtree: true,
                        attributeFilter: [MV_SRC, MV_SRCSET, MV_STYLE]
                    };
                    marvelobserver = new MutationObserver(marvelsubscriber);
                    marvelobserver.observe(mutation.addedNodes[0], marvelobserverConfig);
                }
            }
        }
    }

    /*
    function marvelsubscriberhead(mutations) {
    	
    	  var mutation;
    	  var bodyfound=false;
          var k;
    	  for(k = 0; k < mutations.length; k++){
    	    mutation=mutations[k];
    	    if(mutation && mutation.addedNodes && mutation.addedNodes.length>0){
    	    	
    	    	var nodename=mutation.addedNodes[0].nodeName.toLowerCase();
    			if(!bodyfound && nodename==MV_BODY){
    				bodyfound=true;
    				if(marveldebug)
    					marvelprint("Body found flag enabled");
    			}
    			else
    				marvelprocessnode(mutation.addedNodes[0]);
    	    }
    	  }
    	  
    	  if(bodyfound){
    		  if(marveldebug)
    				marvelprint("Head marvelsubscriber dis-connected");
    		marvelobserverhead.disconnect();
    		marvelobserverConfig = {childList: true, subtree: true, attributeFilter:[MV_SRC,MV_SRCSET,MV_STYLE] };
    		marvelobserver = new MutationObserver(marvelsubscriber);
    		marvelobserver.observe(mutation.addedNodes[0],marvelobserverConfig);
    	  }
    }*/

    var MV_MARVEL = "be_marvel",
        MV_ADDED = "1",
        MV_ONERROR = "onerror",
        MV_ONERROR_START = "this.onerror=null;this.src='",
        MV_ONERROR_END = "'";

    function marvelprocessnode(node) {

        var nodename = node.nodeName.toLowerCase();
        var attributes = node.attributes;

        if (nodename == MV_IMG || nodename == MV_SOURCE) {

            var i;
            for (i = 0; i < attributes.length; i++) {
                var attributename = attributes[i].nodeName.toLowerCase();

                if (attributename == MV_SRC || attributename == MV_DATA_SRC) {

                    var oldImgval = attributes[i].nodeValue;
                    if (marveldebug)
                        marvelprint("Checking[node," + nodename + "," + attributename + "]==>" + oldImgval);

                    if (marvelvalidurl(oldImgval)) {
                        var finalUrl = marvelgetnewimagesrc(oldImgval);
                        if (finalUrl && finalUrl.trim().length > 0 && finalUrl != oldImgval) {
                            if (marveldebug)
                                marvelprint("Changing[node," + nodename + "," + attributename + "]==>" + finalUrl);
                            attributes[i].nodeValue = finalUrl;

                            if (attributename == MV_SRC) {
                                node.setAttribute(MV_MARVEL, MV_ADDED);
                                if (marveldatadroponerror != 'true' && !node.getAttribute(MV_ONERROR))
                                    node.setAttribute(MV_ONERROR, MV_ONERROR_START + oldImgval + MV_ONERROR_END);
                            }
                        }
                    }

                    /*node.setAttribute(MV_MARVEL,MV_ADDED);
                    if(!node.getAttribute(MV_ONERROR))
                    	node.setAttribute(MV_ONERROR,MV_ONERROR_START+oldImgval+MV_ONERROR_END);*/
                } else if (attributename == MV_SRCSET && !marveldropsrcset) {

                    var oldsrcset = attributes[i].nodeValue;
                    if (marveldebug)
                        marvelprint("Checking[node," + nodename + ",scrset]==>" + oldsrcset);

                    var newsrcset = marvelgetsrcsetimg(oldsrcset);
                    if (newsrcset && newsrcset.trim().length > 0 && oldsrcset != newsrcset) {
                        if (marveldebug)
                            marvelprint("Changing[node," + nodename + ",scrset]==>" + newsrcset);
                        attributes[i].nodeValue = newsrcset;
                        node.setAttribute(MV_MARVEL, MV_ADDED);
                    }
                } else if (attributename == MV_STYLE) {

                    var style = attributes[i].nodeValue;
                    if (marveldebug)
                        marvelprint("Checking[node,img/source,style]==>" + style);

                    var finalStyle = marvelgetsrcstyle(style);
                    if (finalStyle && finalStyle.trim().length > 0 && style != finalStyle) {
                        if (marveldebug)
                            marvelprint("Changing[node,img/source,style]==>" + finalStyle);
                        attributes[i].nodeValue = finalStyle;
                        node.setAttribute(MV_MARVEL, MV_ADDED);
                    }

                }
            }
        } else if (nodename == MV_DIV || nodename == MV_SECTION || nodename == MV_ARTICLE || nodename == MV_FIGURE || nodename == MV_A) {

            var i;
            for (i = 0; i < attributes.length; i++) {
                var attributename = attributes[i].nodeName.toLowerCase();

                if (attributename == MV_STYLE) {

                    var style = attributes[i].nodeValue;
                    if (marveldebug)
                        marvelprint("Checking[node," + nodename + ",style]==>" + style);

                    var finalStyle = marvelgetsrcstyle(style);
                    if (finalStyle && finalStyle.trim().length > 0 && style != finalStyle) {
                        if (marveldebug)
                            marvelprint("Changing[node," + nodename + ",style]==>" + finalStyle);
                        attributes[i].nodeValue = finalStyle;
                        node.setAttribute(MV_MARVEL, MV_ADDED);
                    }
                } else if (attributename == MV_SRCSET && !marveldropsrcset) {

                    var oldsrcset = attributes[i].nodeValue;
                    if (marveldebug)
                        marvelprint("Checking[node," + nodename + ",srcset]==>" + oldsrcset);

                    var newsrcset = marvelgetsrcsetimg(oldsrcset);
                    if (newsrcset && newsrcset.trim().length > 0 && oldsrcset != newsrcset) {
                        if (marveldebug)
                            marvelprint("Changing[node," + nodename + ",srcset]==>" + newsrcset);
                        attributes[i].nodeValue = newsrcset;
                        node.setAttribute(MV_MARVEL, MV_ADDED);
                    }
                }
            }
        }

        if (node.childNodes && node.childNodes.length > 0) {
            for (var idx = 0; idx < node.childNodes.length; idx++) {
                if (node.childNodes[idx].nodeType == "1") { //if element node
                    marvelprocessnode(node.childNodes[idx]); //recursive
                }
            }
        }

    }

    function marvelprocessattribute(node, attributename) {

        var nodename = node.nodeName.toLowerCase();
        var attributename = attributename.toLowerCase();

        if (nodename == MV_IMG || nodename == MV_SOURCE) {

            if (attributename == MV_SRC) {

                var oldImgval = node.src;
                if (marveldebug)
                    marvelprint("Checking[attribute," + nodename + ",src]==>" + oldImgval);

                if (marvelvalidurl(oldImgval)) {
                    var finalUrl = marvelgetnewimagesrc(oldImgval);
                    if (finalUrl && finalUrl.trim().length > 0 && finalUrl != oldImgval) {
                        if (marveldebug)
                            marvelprint("Changing[attribute," + nodename + ",src]==>" + finalUrl);
                        node.src = finalUrl;
                        node.setAttribute(MV_MARVEL, MV_ADDED);
                        if (marveldatadroponerror != 'true' && !node.getAttribute(MV_ONERROR))
                            node.setAttribute(MV_ONERROR, MV_ONERROR_START + oldImgval + MV_ONERROR_END);
                    }
                }
            }

            if (attributename == MV_SRCSET && !marveldropsrcset) {

                var oldsrcset = node.getAttribute(MV_SRCSET);
                if (marveldebug)
                    marvelprint("Checking[attribute,+" + nodename + "+,srcset]==>" + oldsrcset);

                var newsrcset = marvelgetsrcsetimg(oldsrcset);
                if (newsrcset && newsrcset.trim().length > 0 && oldsrcset != newsrcset) {
                    if (marveldebug)
                        marvelprint("Changing[attribute," + nodename + ",srcset]==>" + newsrcset);
                    node.setAttribute(MV_SRCSET, newsrcset);
                    node.setAttribute(MV_MARVEL, MV_ADDED);
                }

            }
        } else if ((nodename == MV_DIV || nodename == MV_SECTION || nodename == MV_ARTICLE || nodename == MV_FIGURE || nodename == MV_A) && attributename == MV_STYLE) {

            var style = node.getAttribute(MV_STYLE);
            if (marveldebug)
                marvelprint("Checking[attribute,div," + nodename + "]==>" + style);

            var finalStyle = marvelgetsrcstyle(style);
            if (finalStyle && finalStyle.trim().length > 0 && style != finalStyle) {
                if (marveldebug)
                    marvelprint("Changing[attribute,div," + nodename + "]==>" + finalStyle);
                node.setAttribute(MV_STYLE, finalStyle);
                node.setAttribute(MV_MARVEL, MV_ADDED);
            }
        }

    }

    function marvelsubscriber(mutations) {

        var mutation;
        var marveladded;
        var k;
        for (k = 0; k < mutations.length; k++) {
            mutation = mutations[k];
            if (mutation) {
                if (mutation.addedNodes.length > 0 && mutation.addedNodes[0].nodeType == "1") {
                    marveladded = mutation.addedNodes[0].getAttribute(MV_MARVEL);
                    if (!marveladded || marveladded != MV_ADDED)
                        marvelprocessnode(mutation.addedNodes[0]);
                } else if (mutation.type == MV_ATT && mutation.target.nodeType == "1") {
                    marveladded = mutation.target.getAttribute(MV_MARVEL);
                    if (!marveladded || marveladded != MV_ADDED)
                        marvelprocessattribute(mutation.target, mutation.attributeName)
                }
            }
        }
    }

    // Enable the ability to use Marvel both as an inline script as an NPM package.
    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = enableMarvel).enableMarvel = enableMarvel;
        // Export for CommonJS support.
        freeExports.enableMarvel = enableMarvel;
    } else {
        // Export to the global object.
        root.enableMarvel = enableMarvel;
        enableMarvel(null);
    }
})();